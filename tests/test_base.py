import pytest # type: ignore

from rosalind import base_count_str, complement, count_bases, reverse_complement, transcribe, recurrence_relation, gc_content, parse_fasta, clean_sequence, max_gc_fasta, count_point_mutations, probability_dominant, translate_rna, find_motif, consensus_profile, fasta_consensus_profile


def test_count_bases():
    assert count_bases("GATTACA") == {"G": 1, "A": 3, "T": 2, "C": 1, "U": 0}


def test_base_count_str():
    assert base_count_str(count_bases("GATTACA")) == "3 1 1 2"


def test_transcribe():
    dna_count = count_bases("GATTACA")
    rna_count = count_bases(transcribe("GATTACA"))
    assert rna_count["U"] == dna_count["T"]
    assert rna_count["T"] == 0


def test_complement():
    assert complement("AAAACCCGGT") == "TTTTGGGCCA"


@pytest.mark.parametrize("test_input_dna,expected_complement", [
    ("GATTACA", "CTAATGT"),
    ("AAAACCCGGT", "TTTTGGGCCA")
])
def test_complement_many(test_input_dna, expected_complement):
    assert complement(test_input_dna) == expected_complement


def test_reverse_complement():
    assert reverse_complement("AAAACCCGGT") == "ACCGGGTTTT"


def test_recurrence_relation():
    assert recurrence_relation(5, 3) == 19
    assert recurrence_relation(36,2) == 22906492245


def test_gc_content():
    assert gc_content("AGCTATAG") == 37.5


def test_clean_sequence():
    seq = 'CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCC\n    TCCCACTAATAATTCTGAGG\n    '
    assert clean_sequence(seq) == 'CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG'


def test_parse_fasta():
    fasta = ">Rosalind_6404\n\
    CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCC\n\
    TCCCACTAATAATTCTGAGG\n\
    >Rosalind_5959\n\
    CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCT\n\
    ATATCCATTTGTCAGCAGACACGC\n\
    >Rosalind_0808\n\
    CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGAC\n\
    TGGGAACCTGCGGGCAGTAGGTGGAAT"
    result = parse_fasta(fasta) 
    assert list(result.keys()) == [
        'Rosalind_6404',
        'Rosalind_5959',
        'Rosalind_0808',
    ]


def test_max_gc_fasta():
    fasta = ">Rosalind_6404\n\
    CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCC\n\
    TCCCACTAATAATTCTGAGG\n\
    >Rosalind_5959\n\
    CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCT\n\
    ATATCCATTTGTCAGCAGACACGC\n\
    >Rosalind_0808\n\
    CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGAC\n\
    TGGGAACCTGCGGGCAGTAGGTGGAAT"
    assert max_gc_fasta(fasta) == ("Rosalind_0808", 60.919540)


def test_count_point_mutations():
    s = "GAGCCTACTAACGGGAT"
    t = "CATCGTAATGACGGCCT"
    assert count_point_mutations(s, t) == 7
    s = "GTAAGCCATAACGTATCGCAAACAAGCTTCGGGGTCCCCTACCGTACGACCGGACCCTACGTCGTCGGTTCCTATTTCGCACTATTAATCCAAATGTGTTTAAAGTAGCATAAGGATGCCACATCGCAACGGTACCCTTCAATGCTTCACGGGTTGGCCAACGCAACGGCACTGTGGTCCCATCAGCATGCCATTTAGACCTCTCCCTCCATGGTCCCGTATCGACACAGGGGGTGCCACCTGTTGGCATCGCTGTAACCCGAAATGCAATTCGACGCAATGCTACTCGCAATGAACAGACGTGACACTACGCCCCACGCACGTGGACCGATTCCCCCACATACGTGTCTGCGAACTCCGGAAGGGGATAACCGACATCAACATTTATTTGCGGTGTAATACACGCGTGTAGATTCCTGTGCCACATGGATTAGGTTCAACAGGTTACGCTCAGTCAACTAGACTGCACCAAGCAGCACACGACGGGCATAGTCACAACAGTATGGTGTAATACTCATCTCCCTTACTCTGCGAGTTCCAACGCGAGATCAACATCGAATCCCAATCGTTTGTAAACAGATGGAAGAGTCGGTCCACTGTGCAAGATTTGAGGCAACCCCCTTTTCGACCGGTAACTCACAAAAACACATGTAAGTACTTGCGTCCATATCGTAGGAGGACGCGTGAAACTCATGAAAAGGAGGCGGGTCCGGCACATACAGGCGTTAATCCTCTCAGAAGTATAGCTCGGACGTATTAGGACTTAAACGCCGCTCGAGTGTGGCCAAACGCTAACATTTGGCAGAACAGCCCTGCGTACCCGCAACAGCGAAAATTAGCACACATGATCCCTTCCTATCTGAAGGAACATTAAGGGAGATCCGAAATGAGCCGCAAGTGGATTGCAAGTTCGGTATTCACAATTTTCGAAGTGTAGGATCTAATGCACGTGCAGACACTCGCTAACGTCTCG"
    t = "GTACGACAGAAAGACCCGAACTCATGGTAGCCAGACTCCTCTTGGTAGACCAGTCACTACGCCGACAAGTCGTGGAGCGATGACATAAGCCAATCGCAAAATACGCAGATCGAAAGGGCGCCAGCACGCTGGGCCCCTTAAGTAACGCCCCACGTAGGCGGTATACAGGAGAGAGGGCCTTATCGCGTTACCATCACGCTCTTGCACGGCATGTAGAATTCGCGAGTACGGAGCAGGCATCCGGAGGGCACAGCAGTCCCTCGTAGTATATTCGAAGCCATTCGCCAATGAACGTACGGTCAATAAACAACGTCGCGCGGGTTGCCCCCTAGTCCCCCTTGGCCCGGGTATGAAGAGGCCGCAGCAGTTACTCCACGCGAGGATGTGATCGCAGTTCACTCCAGGACCTGGGGTAACTCACCCAGGGTGATTAGGTGCGACCGTGTAGGCCTAAACAAGCGACCAGCACGCATCAACTCCTTACTATCAGAGTCGCAACTCTAATGAGAAATCCCCTCGACCCTTAATCCTGGAAAAGCTGCACTAGCTAGCCACCATGTCCTCCCTTATGGTAAATAGTTGCCACCCTCGGTCTTCTGCGCAAAACCTTTCTCCATAACAACTTCGAGCACTGCTTCCAAATAAGCCATAAAATTCTCTGCCTCTAGTTCTAAGCGGTACGAGTGTAACTAAAGACTAAGAAACCCCTCTTCGACCTACAGACGAGTTTCTTCCCCCATTCGTAGCTTGGACACCATTTTACCTAATGTCCGCGCGACTGAGAGCAATGGTAGCGAGTTTACTGTACTGCCTGACGTACACTCCCTGGTGACAATACACGTATATGCTCACAACGAGCCGGAAGACCGATAGAAGTAGCTACGATATTAACAAGAAATGTCCTTCACAGCGACGATACTCAGGTGGTATGATGTGCGTTATATGTCACAGGCCGTTTTCCACGAGCATCAGG"
    assert count_point_mutations(s, t) == 507


def test_probability_dominant():
    assert probability_dominant(2, 2, 2) == 0.78333
    assert probability_dominant(26, 22, 21) == 0.7874


def test_translate_rna():
    rna = "AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA"
    assert translate_rna(rna) == "MAMAPRTEINSTRING"


def test_find_motif():
    dna = "GATATATGCATATACTT"
    sub = "ATAT"
    assert find_motif(dna, sub) == (2, 4, 10)


def test_profile_consensus():
    seqs = [
        "ATCCAGCT",
        "GGGCAACT",
        "ATGGATCT",
        "AAGCAACC",
        "TTGGAACT",
        "ATGCCATT",
        "ATGGCACT",
    ]
    assert consensus_profile(*seqs) == (
        'ATGCAACT', 
        {
            'A': [5, 1, 0, 0, 5, 5, 0, 0], 
            'C': [0, 0, 1, 4, 2, 0, 6, 1], 
            'G': [1, 1, 6, 3, 0, 1, 0, 0], 
            'T': [1, 5, 0, 0, 0, 1, 1, 6]
        }
    )


def test_fasta_consensus_profile():
    fasta = "\
    >Rosalind_1\
    ATCCAGCT\
    >Rosalind_2\
    GGGCAACT\
    >Rosalind_3\
    ATGGATCT\
    >Rosalind_4\
    AAGCAACC\
    >Rosalind_5\
    TTGGAACT\
    >Rosalind_6\
    ATGCCATT\
    >Rosalind_7\
    ATGGCACT"
    assert fasta_consensus_profile(fasta) == (
        'ATGCAACT', 
        {
            'A': [5, 1, 0, 0, 5, 5, 0, 0], 
            'C': [0, 0, 1, 4, 2, 0, 6, 1], 
            'G': [1, 1, 6, 3, 0, 1, 0, 0], 
            'T': [1, 5, 0, 0, 0, 1, 1, 6]
        }
    )
